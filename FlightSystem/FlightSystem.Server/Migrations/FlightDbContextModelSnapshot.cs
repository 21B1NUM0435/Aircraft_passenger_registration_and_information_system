// <auto-generated />
using System;
using FlightSystem.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlightSystem.Server.Migrations
{
    [DbContext(typeof(FlightDbContext))]
    partial class FlightDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("FlightSystem.Server.Models.Aircraft", b =>
                {
                    b.Property<string>("AircraftId")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("ManufacturedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("AircraftId");

                    b.ToTable("Aircraft");

                    b.HasData(
                        new
                        {
                            AircraftId = "AC001",
                            Capacity = 189,
                            CreatedAt = new DateTime(2025, 5, 27, 10, 33, 15, 801, DateTimeKind.Utc).AddTicks(1124),
                            IsActive = true,
                            ManufacturedDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Boeing",
                            Model = "Boeing 737-800",
                            UpdatedAt = new DateTime(2025, 5, 27, 10, 33, 15, 801, DateTimeKind.Utc).AddTicks(1125)
                        },
                        new
                        {
                            AircraftId = "AC002",
                            Capacity = 180,
                            CreatedAt = new DateTime(2025, 5, 27, 10, 33, 15, 801, DateTimeKind.Utc).AddTicks(1129),
                            IsActive = true,
                            ManufacturedDate = new DateTime(2019, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Airbus",
                            Model = "Airbus A320",
                            UpdatedAt = new DateTime(2025, 5, 27, 10, 33, 15, 801, DateTimeKind.Utc).AddTicks(1130)
                        },
                        new
                        {
                            AircraftId = "AC003",
                            Capacity = 350,
                            CreatedAt = new DateTime(2025, 5, 27, 10, 33, 15, 801, DateTimeKind.Utc).AddTicks(1132),
                            IsActive = true,
                            ManufacturedDate = new DateTime(2018, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manufacturer = "Boeing",
                            Model = "Boeing 777-300ER",
                            UpdatedAt = new DateTime(2025, 5, 27, 10, 33, 15, 801, DateTimeKind.Utc).AddTicks(1133)
                        });
                });

            modelBuilder.Entity("FlightSystem.Server.Models.AirlineStaff", b =>
                {
                    b.Property<string>("StaffId")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("HiredDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("StaffId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("AirlineStaff");

                    b.HasData(
                        new
                        {
                            StaffId = "ST001",
                            CreatedAt = new DateTime(2025, 5, 27, 10, 33, 15, 801, DateTimeKind.Utc).AddTicks(1408),
                            Department = "IT",
                            Email = "admin@flightsystem.com",
                            HiredDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Админ Систем",
                            PasswordHash = "$2a$11$dummy.hash.for.development.only",
                            Phone = "+976-99000001",
                            Position = "System Administrator",
                            UpdatedAt = new DateTime(2025, 5, 27, 10, 33, 15, 801, DateTimeKind.Utc).AddTicks(1409),
                            Username = "admin"
                        },
                        new
                        {
                            StaffId = "ST002",
                            CreatedAt = new DateTime(2025, 5, 27, 10, 33, 15, 801, DateTimeKind.Utc).AddTicks(1413),
                            Department = "Ground Services",
                            Email = "checkin1@flightsystem.com",
                            HiredDate = new DateTime(2023, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Бүртгэлийн Ажилтан 1",
                            PasswordHash = "$2a$11$dummy.hash.for.development.only",
                            Phone = "+976-99000002",
                            Position = "Check-in Agent",
                            UpdatedAt = new DateTime(2025, 5, 27, 10, 33, 15, 801, DateTimeKind.Utc).AddTicks(1414),
                            Username = "checkin1"
                        });
                });

            modelBuilder.Entity("FlightSystem.Server.Models.BoardingPass", b =>
                {
                    b.Property<string>("BoardingPassId")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BoardingTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("BookingReference")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Gate")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("IssuedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("IssuedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PrintedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("PrintedBy")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("BoardingPassId");

                    b.HasIndex("BookingReference")
                        .IsUnique();

                    b.ToTable("BoardingPasses");
                });

            modelBuilder.Entity("FlightSystem.Server.Models.Booking", b =>
                {
                    b.Property<string>("BookingReference")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CheckInCounter")
                        .HasMaxLength(5)
                        .HasColumnType("TEXT");

                    b.Property<string>("CheckInStaff")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CheckInTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("FlightNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("SeatId")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("BookingReference");

                    b.HasIndex("FlightNumber");

                    b.HasIndex("SeatId")
                        .IsUnique();

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Booking_Status");

                    b.HasIndex("PassportNumber", "FlightNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_Booking_Passenger_Flight");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            BookingReference = "BK001",
                            BookingDate = new DateTime(2025, 5, 20, 18, 33, 15, 801, DateTimeKind.Local).AddTicks(1324),
                            CreatedAt = new DateTime(2025, 5, 27, 10, 33, 15, 801, DateTimeKind.Utc).AddTicks(1332),
                            FlightNumber = "MR101",
                            PassportNumber = "MN12345678",
                            PaymentStatus = 1,
                            Status = 0,
                            TotalPrice = 200m,
                            UpdatedAt = new DateTime(2025, 5, 27, 10, 33, 15, 801, DateTimeKind.Utc).AddTicks(1332)
                        },
                        new
                        {
                            BookingReference = "BK002",
                            BookingDate = new DateTime(2025, 5, 22, 18, 33, 15, 801, DateTimeKind.Local).AddTicks(1334),
                            CreatedAt = new DateTime(2025, 5, 27, 10, 33, 15, 801, DateTimeKind.Utc).AddTicks(1335),
                            FlightNumber = "MR101",
                            PassportNumber = "MN87654321",
                            PaymentStatus = 1,
                            Status = 0,
                            TotalPrice = 200m,
                            UpdatedAt = new DateTime(2025, 5, 27, 10, 33, 15, 801, DateTimeKind.Utc).AddTicks(1336)
                        },
                        new
                        {
                            BookingReference = "BK003",
                            BookingDate = new DateTime(2025, 5, 24, 18, 33, 15, 801, DateTimeKind.Local).AddTicks(1338),
                            CreatedAt = new DateTime(2025, 5, 27, 10, 33, 15, 801, DateTimeKind.Utc).AddTicks(1339),
                            FlightNumber = "MR102",
                            PassportNumber = "MN11223344",
                            PaymentStatus = 1,
                            Status = 0,
                            TotalPrice = 200m,
                            UpdatedAt = new DateTime(2025, 5, 27, 10, 33, 15, 801, DateTimeKind.Utc).AddTicks(1339)
                        });
                });

            modelBuilder.Entity("FlightSystem.Server.Models.CheckInCounter", b =>
                {
                    b.Property<string>("CounterId")
                        .HasMaxLength(5)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("OpenedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("StaffId")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Terminal")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("CounterId");

                    b.HasIndex("StaffId");

                    b.ToTable("CheckInCounters");

                    b.HasData(
                        new
                        {
                            CounterId = "C001",
                            CreatedAt = new DateTime(2025, 5, 27, 10, 33, 15, 801, DateTimeKind.Utc).AddTicks(1441),
                            Location = "Terminal 1, Gate A1-A5",
                            OpenedAt = new DateTime(2025, 5, 27, 16, 33, 15, 801, DateTimeKind.Local).AddTicks(1437),
                            StaffId = "ST002",
                            Status = 1,
                            Terminal = "T1",
                            UpdatedAt = new DateTime(2025, 5, 27, 10, 33, 15, 801, DateTimeKind.Utc).AddTicks(1442)
                        },
                        new
                        {
                            CounterId = "C002",
                            CreatedAt = new DateTime(2025, 5, 27, 10, 33, 15, 801, DateTimeKind.Utc).AddTicks(1444),
                            Location = "Terminal 1, Gate A6-A10",
                            Status = 0,
                            Terminal = "T1",
                            UpdatedAt = new DateTime(2025, 5, 27, 10, 33, 15, 801, DateTimeKind.Utc).AddTicks(1444)
                        });
                });

            modelBuilder.Entity("FlightSystem.Server.Models.CheckInRecord", b =>
                {
                    b.Property<string>("CheckInId")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("BookingReference")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<int>("CheckInMethod")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CheckInTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("CounterId")
                        .HasMaxLength(5)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("StaffId")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("CheckInId");

                    b.HasIndex("BookingReference");

                    b.HasIndex("CheckInTime")
                        .HasDatabaseName("IX_CheckInRecord_Time");

                    b.HasIndex("CounterId");

                    b.HasIndex("StaffId");

                    b.ToTable("CheckInRecords");
                });

            modelBuilder.Entity("FlightSystem.Server.Models.Flight", b =>
                {
                    b.Property<string>("FlightNumber")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("AircraftId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("FlightNumber");

                    b.HasIndex("AircraftId");

                    b.HasIndex("DepartureTime")
                        .HasDatabaseName("IX_Flight_DepartureTime");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Flight_Status");

                    b.ToTable("Flights");

                    b.HasData(
                        new
                        {
                            FlightNumber = "MR101",
                            AircraftId = "AC001",
                            ArrivalTime = new DateTime(2025, 5, 27, 13, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 5, 27, 10, 33, 15, 801, DateTimeKind.Utc).AddTicks(1266),
                            CreatedBy = "System",
                            DepartureTime = new DateTime(2025, 5, 27, 11, 0, 0, 0, DateTimeKind.Local),
                            Destination = "PEK",
                            Origin = "ULN",
                            Status = 0,
                            UpdatedAt = new DateTime(2025, 5, 27, 10, 33, 15, 801, DateTimeKind.Utc).AddTicks(1267),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            FlightNumber = "MR102",
                            AircraftId = "AC002",
                            ArrivalTime = new DateTime(2025, 5, 27, 16, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 5, 27, 10, 33, 15, 801, DateTimeKind.Utc).AddTicks(1270),
                            CreatedBy = "System",
                            DepartureTime = new DateTime(2025, 5, 27, 13, 0, 0, 0, DateTimeKind.Local),
                            Destination = "ICN",
                            Origin = "ULN",
                            Status = 0,
                            UpdatedAt = new DateTime(2025, 5, 27, 10, 33, 15, 801, DateTimeKind.Utc).AddTicks(1271),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            FlightNumber = "MR103",
                            AircraftId = "AC001",
                            ArrivalTime = new DateTime(2025, 5, 27, 17, 0, 0, 0, DateTimeKind.Local),
                            CreatedAt = new DateTime(2025, 5, 27, 10, 33, 15, 801, DateTimeKind.Utc).AddTicks(1274),
                            CreatedBy = "System",
                            DepartureTime = new DateTime(2025, 5, 27, 15, 0, 0, 0, DateTimeKind.Local),
                            Destination = "ULN",
                            Origin = "PEK",
                            Status = 3,
                            UpdatedAt = new DateTime(2025, 5, 27, 10, 33, 15, 801, DateTimeKind.Utc).AddTicks(1274),
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("FlightSystem.Server.Models.Passenger", b =>
                {
                    b.Property<string>("PassportNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PassportExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("PassportNumber");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_Passenger_Email");

                    b.ToTable("Passengers");

                    b.HasData(
                        new
                        {
                            PassportNumber = "MN12345678",
                            Address = "Ulaanbaatar, Mongolia",
                            CreatedAt = new DateTime(2025, 5, 27, 10, 33, 15, 801, DateTimeKind.Utc).AddTicks(1296),
                            DateOfBirth = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "batbold@email.com",
                            FirstName = "Батболд",
                            Gender = "Male",
                            LastName = "Мөнх",
                            Nationality = "Mongolian",
                            PassportExpiryDate = new DateTime(2030, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "+976-99112233",
                            UpdatedAt = new DateTime(2025, 5, 27, 10, 33, 15, 801, DateTimeKind.Utc).AddTicks(1297)
                        },
                        new
                        {
                            PassportNumber = "MN87654321",
                            Address = "Ulaanbaatar, Mongolia",
                            CreatedAt = new DateTime(2025, 5, 27, 10, 33, 15, 801, DateTimeKind.Utc).AddTicks(1301),
                            DateOfBirth = new DateTime(1990, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sarantuya@email.com",
                            FirstName = "Сарантуяа",
                            Gender = "Female",
                            LastName = "Болд",
                            Nationality = "Mongolian",
                            PassportExpiryDate = new DateTime(2029, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "+976-99445566",
                            UpdatedAt = new DateTime(2025, 5, 27, 10, 33, 15, 801, DateTimeKind.Utc).AddTicks(1302)
                        },
                        new
                        {
                            PassportNumber = "MN11223344",
                            Address = "Darkhan, Mongolia",
                            CreatedAt = new DateTime(2025, 5, 27, 10, 33, 15, 801, DateTimeKind.Utc).AddTicks(1305),
                            DateOfBirth = new DateTime(1988, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tomor@email.com",
                            FirstName = "Төмөр",
                            Gender = "Male",
                            LastName = "Бат",
                            Nationality = "Mongolian",
                            PassportExpiryDate = new DateTime(2031, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "+976-99778899",
                            UpdatedAt = new DateTime(2025, 5, 27, 10, 33, 15, 801, DateTimeKind.Utc).AddTicks(1306)
                        });
                });

            modelBuilder.Entity("FlightSystem.Server.Models.Seat", b =>
                {
                    b.Property<string>("SeatId")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("AircraftId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<int>("Class")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("FlightNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAisle")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsEmergencyExit")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsWindow")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(8,2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.HasKey("SeatId");

                    b.HasIndex("AircraftId");

                    b.HasIndex("SeatNumber")
                        .HasDatabaseName("IX_Seat_Number");

                    b.HasIndex("FlightNumber", "IsAvailable")
                        .HasDatabaseName("IX_Seat_Flight_Available");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("FlightSystem.Server.Models.BoardingPass", b =>
                {
                    b.HasOne("FlightSystem.Server.Models.Booking", "Booking")
                        .WithOne("BoardingPass")
                        .HasForeignKey("FlightSystem.Server.Models.BoardingPass", "BookingReference")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("FlightSystem.Server.Models.Booking", b =>
                {
                    b.HasOne("FlightSystem.Server.Models.Flight", "Flight")
                        .WithMany("Bookings")
                        .HasForeignKey("FlightNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightSystem.Server.Models.Passenger", "Passenger")
                        .WithMany("Bookings")
                        .HasForeignKey("PassportNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightSystem.Server.Models.Seat", "Seat")
                        .WithOne("Booking")
                        .HasForeignKey("FlightSystem.Server.Models.Booking", "SeatId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Flight");

                    b.Navigation("Passenger");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("FlightSystem.Server.Models.CheckInCounter", b =>
                {
                    b.HasOne("FlightSystem.Server.Models.AirlineStaff", "Staff")
                        .WithMany("CheckInCounters")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("FlightSystem.Server.Models.CheckInRecord", b =>
                {
                    b.HasOne("FlightSystem.Server.Models.Booking", "Booking")
                        .WithMany("CheckInRecords")
                        .HasForeignKey("BookingReference")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightSystem.Server.Models.CheckInCounter", "Counter")
                        .WithMany("CheckInRecords")
                        .HasForeignKey("CounterId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("FlightSystem.Server.Models.AirlineStaff", "Staff")
                        .WithMany("CheckInRecords")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Booking");

                    b.Navigation("Counter");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("FlightSystem.Server.Models.Flight", b =>
                {
                    b.HasOne("FlightSystem.Server.Models.Aircraft", "Aircraft")
                        .WithMany("Flights")
                        .HasForeignKey("AircraftId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Aircraft");
                });

            modelBuilder.Entity("FlightSystem.Server.Models.Seat", b =>
                {
                    b.HasOne("FlightSystem.Server.Models.Aircraft", "Aircraft")
                        .WithMany("SeatConfiguration")
                        .HasForeignKey("AircraftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightSystem.Server.Models.Flight", "Flight")
                        .WithMany("Seats")
                        .HasForeignKey("FlightNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aircraft");

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("FlightSystem.Server.Models.Aircraft", b =>
                {
                    b.Navigation("Flights");

                    b.Navigation("SeatConfiguration");
                });

            modelBuilder.Entity("FlightSystem.Server.Models.AirlineStaff", b =>
                {
                    b.Navigation("CheckInCounters");

                    b.Navigation("CheckInRecords");
                });

            modelBuilder.Entity("FlightSystem.Server.Models.Booking", b =>
                {
                    b.Navigation("BoardingPass");

                    b.Navigation("CheckInRecords");
                });

            modelBuilder.Entity("FlightSystem.Server.Models.CheckInCounter", b =>
                {
                    b.Navigation("CheckInRecords");
                });

            modelBuilder.Entity("FlightSystem.Server.Models.Flight", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("FlightSystem.Server.Models.Passenger", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("FlightSystem.Server.Models.Seat", b =>
                {
                    b.Navigation("Booking");
                });
#pragma warning restore 612, 618
        }
    }
}
