@page "/flights"
@using FlightSystem.Server.Models
@using FlightSystem.Server.Data
@using Microsoft.AspNetCore.SignalR.Client
@inject FlightDbContext DbContext
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>Flight Information Display</PageTitle>

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col-12">
            <h1 class="display-4 text-center text-white mb-3">✈️ Flight Information Display</h1>
            <div class="text-center mb-4">
                <span class="badge @GetConnectionStatusClass() fs-6 me-3">
                    @connectionStatus
                </span>
                <span class="badge bg-light text-dark fs-6">
                    Last updated: @lastUpdated.ToString("HH:mm:ss")
                </span>
                @if (!string.IsNullOrEmpty(lastUpdateMessage))
                {
                    <div class="alert alert-info mt-2 d-inline-block">
                        <i class="fas fa-info-circle me-2"></i>
                        @lastUpdateMessage
                    </div>
                }
            </div>
        </div>
    </div>

    @if (flights == null)
    {
        <div class="text-center">
            <div class="spinner-border text-light" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3 text-light fs-4">Loading flights...</p>
        </div>
    }
    else if (!flights.Any())
    {
        <div class="alert alert-warning text-center">
            <h4>
                <i class="fas fa-exclamation-triangle me-2"></i>
                No flights available
            </h4>
            <p>Please check back later for flight information.</p>
            <button class="btn btn-primary" @onclick="LoadFlights">
                <i class="fas fa-refresh me-2"></i>
                Refresh
            </button>
        </div>
    }
    else
    {
        <div class="row">
            @foreach (var flight in flights)
            {
                <div class="col-xl-4 col-lg-6 col-md-12 mb-4">
                    <div class="card h-100 shadow border-0 @GetFlightCardClass(flight)">
                        <div class="card-header @GetStatusClass(flight.Status) text-white position-relative">
                            <div class="d-flex justify-content-between align-items-center">
                                <h5 class="card-title mb-0">
                                    <strong>@flight.FlightNumber</strong>
                                </h5>
                                @if (IsFlightUpdatedRecently(flight.FlightNumber))
                                {
                                    <span class="badge bg-success">
                                        <i class="fas fa-sync-alt fa-spin me-1"></i>
                                        Updated
                                    </span>
                                }
                            </div>
                            <small class="opacity-75">@flight.AircraftModel</small>
                        </div>
                        <div class="card-body">
                            <div class="row text-center mb-3">
                                <div class="col-5">
                                    <h6 class="text-muted mb-1">FROM</h6>
                                    <h2 class="text-primary mb-0">@flight.Origin</h2>
                                </div>
                                <div class="col-2 d-flex align-items-center justify-content-center">
                                    <i class="fas fa-plane text-primary fa-2x"></i>
                                </div>
                                <div class="col-5">
                                    <h6 class="text-muted mb-1">TO</h6>
                                    <h2 class="text-primary mb-0">@flight.Destination</h2>
                                </div>
                            </div>
                            <hr>
                            <div class="row mb-3">
                                <div class="col-6">
                                    <div class="text-center">
                                        <i class="fas fa-plane-departure text-success mb-2"></i>
                                        <div>
                                            <small class="text-muted">Departure</small>
                                        </div>
                                        <div class="fw-bold fs-5">@flight.DepartureTime.ToString("HH:mm")</div>
                                        <div class="text-muted">@flight.DepartureTime.ToString("MMM dd, yyyy")</div>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="text-center">
                                        <i class="fas fa-plane-arrival text-info mb-2"></i>
                                        <div>
                                            <small class="text-muted">Arrival</small>
                                        </div>
                                        <div class="fw-bold fs-5">@flight.ArrivalTime.ToString("HH:mm")</div>
                                        <div class="text-muted">@flight.ArrivalTime.ToString("MMM dd, yyyy")</div>
                                    </div>
                                </div>
                            </div>
                            @if (GetTimeUntilDeparture(flight) != null)
                            {
                                <div class="alert alert-light text-center mb-3">
                                    <small class="text-muted">Time until departure:</small>
                                    <div class="fw-bold">@GetTimeUntilDeparture(flight)</div>
                                </div>
                            }
                        </div>
                        <div class="card-footer bg-transparent">
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="badge @GetStatusClass(flight.Status) fs-6">
                                    <i class="@GetStatusIcon(flight.Status) me-1"></i>
                                    @GetStatusText(flight.Status)
                                </span>
                                <div class="text-end">
                                    <small class="text-muted d-block">Available Seats</small>
                                    <span class="fw-bold">@GetAvailableSeatsCount(flight)</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        <div class="text-center mt-4">
            <button class="btn btn-light btn-lg" @onclick="LoadFlights">
                <i class="fas fa-sync-alt me-2"></i>
                Refresh Flights
            </button>
        </div>
    }
</div>

<style>
    .flight-card-pulse {
        animation: pulse 2s ease-in-out;
    }
    @@keyframes pulse {
        0%{
            transform: scale(1);
            box-shadow: 0 0 0 0 rgba(0, 123, 255, 0.7);
        }

        70% {
            transform: scale(1.02);
            box-shadow: 0 0 0 10px rgba(0, 123, 255, 0);
        }

        100% {
            transform: scale(1);
            box-shadow: 0 0 0 0 rgba(0, 123, 255, 0);
        }

    }
</style>

@code {
    private List<Flight>? flights;
    private HubConnection? hubConnection;
    private string connectionStatus = "Connecting...";
    private DateTime lastUpdated = DateTime.Now;
    private string lastUpdateMessage = "";
    private HashSet<string> recentlyUpdatedFlights = new();
    private System.Threading.Timer? updateTimer;

    protected override async Task OnInitializedAsync()
    {
        // Load initial data
        await LoadFlights();

        // Setup SignalR connection
        hubConnection = new HubConnectionBuilder()
            .WithUrl("/flighthub")
            .WithAutomaticReconnect()
            .Build();

        // Handle flight status changes
        hubConnection.On<dynamic>("FlightStatusChanged", async (update) =>
        {
            var flightNumber = update.GetProperty("FlightNumber").GetString();
            var newStatus = update.GetProperty("NewStatus").GetString();
            lastUpdateMessage = $"Flight {flightNumber} status changed to {newStatus}";
            recentlyUpdatedFlights.Add(flightNumber);

            await LoadFlights();
            await InvokeAsync(StateHasChanged);

            // Clear the update highlight after 5 seconds
            _ = Task.Delay(5000).ContinueWith(async _ =>
            {
                recentlyUpdatedFlights.Remove(flightNumber);
                await InvokeAsync(StateHasChanged);
            });
        });

        // Handle seat assignments
        hubConnection.On<dynamic>("SeatAssigned", async (update) =>
        {
            var flightNumber = update.GetProperty("FlightNumber").GetString();
            var passengerName = update.GetProperty("PassengerName").GetString();
            var seatNumber = update.GetProperty("SeatNumber").GetString();
            lastUpdateMessage = $"Seat {seatNumber} assigned to {passengerName} on flight {flightNumber}";
            recentlyUpdatedFlights.Add(flightNumber);

            await LoadFlights();
            await InvokeAsync(StateHasChanged);

            // Clear the update highlight after 3 seconds
            _ = Task.Delay(3000).ContinueWith(async _ =>
            {
                recentlyUpdatedFlights.Remove(flightNumber);
                lastUpdateMessage = "";
                await InvokeAsync(StateHasChanged);
            });
        });

        // Connection event handlers
        hubConnection.Closed += async (error) =>
        {
            connectionStatus = "Disconnected";
            await InvokeAsync(StateHasChanged);
        };
        hubConnection.Reconnecting += async (error) =>
        {
            connectionStatus = "Reconnecting...";
            await InvokeAsync(StateHasChanged);
        };
        hubConnection.Reconnected += async (connectionId) =>
        {
            connectionStatus = "Connected";
            await InvokeAsync(StateHasChanged);
        };

        try
        {
            await hubConnection.StartAsync();
            connectionStatus = "Connected";
        }
        catch (Exception ex)
        {
            connectionStatus = $"Connection failed: {ex.Message}";
        }

        // Auto-refresh every 30 seconds
        updateTimer = new System.Threading.Timer(async _ =>
        {
            await LoadFlights();
            await InvokeAsync(StateHasChanged);
        }, null, TimeSpan.FromSeconds(30), TimeSpan.FromSeconds(30));
    }

    private async Task LoadFlights()
    {
        try
        {
            flights = await DbContext.Flights
                .Include(f => f.Seats)
                .Include(f => f.Bookings)
                .OrderBy(f => f.DepartureTime)
                .ToListAsync();
            lastUpdated = DateTime.Now;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading flights: {ex.Message}");
            flights = new List<Flight>();
        }
    }

    private string GetStatusClass(FlightStatus status) => status switch
    {
        FlightStatus.CheckingIn => "bg-primary",
        FlightStatus.Boarding => "bg-warning",
        FlightStatus.Departed => "bg-success",
        FlightStatus.Delayed => "bg-danger",
        FlightStatus.Cancelled => "bg-dark",
        _ => "bg-secondary"
    };

    private string GetStatusText(FlightStatus status) => status switch
    {
        FlightStatus.CheckingIn => "Check-in Open",
        FlightStatus.Boarding => "Now Boarding",
        FlightStatus.Departed => "Departed",
        FlightStatus.Delayed => "Delayed",
        FlightStatus.Cancelled => "Cancelled",
        _ => "Unknown"
    };

    private string GetStatusIcon(FlightStatus status) => status switch
    {
        FlightStatus.CheckingIn => "fas fa-check-circle",
        FlightStatus.Boarding => "fas fa-door-open",
        FlightStatus.Departed => "fas fa-plane-departure",
        FlightStatus.Delayed => "fas fa-clock",
        FlightStatus.Cancelled => "fas fa-times-circle",
        _ => "fas fa-question-circle"
    };

    private string GetConnectionStatusClass() => connectionStatus switch
    {
        "Connected" => "bg-success",
        "Connecting..." or "Reconnecting..." => "bg-warning text-dark",
        _ => "bg-danger"
    };

    private int GetAvailableSeatsCount(Flight flight) =>
        flight.Seats?.Count(s => s.IsAvailable) ?? 0;

    private bool IsFlightUpdatedRecently(string flightNumber) =>
        recentlyUpdatedFlights.Contains(flightNumber);

    private string GetFlightCardClass(Flight flight) =>
        IsFlightUpdatedRecently(flight.FlightNumber) ? "flight-card-pulse" : "";

    private string? GetTimeUntilDeparture(Flight flight)
    {
        var timeUntil = flight.DepartureTime - DateTime.Now;
        if (timeUntil.TotalMinutes < 0)
            return null; // Flight has already departed

        if (timeUntil.TotalHours < 24)
        {
            if (timeUntil.TotalHours >= 1)
                return $"{timeUntil.Hours}h {timeUntil.Minutes}m";
            else
                return $"{timeUntil.Minutes} minutes";
        }
        return $"{timeUntil.Days} days";
    }

    public async ValueTask DisposeAsync()
    {
        updateTimer?.Dispose();
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
