@page "/flights"
@using FlightSystem.Server.Models.DTOs
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Flight Information Display</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12 text-center">
            <h1 class="display-4 text-white mb-3">
                <i class="fas fa-plane me-3"></i>
                Flight Information Display
            </h1>
            <div class="mb-4">
                <span class="badge @GetConnectionStatusClass() fs-6 me-3">
                    <i class="fas fa-wifi me-1"></i>
                    @connectionStatus
                </span>
                <span class="badge bg-light text-dark fs-6">
                    <i class="fas fa-clock me-1"></i>
                    Last updated: @lastUpdated.ToString("HH:mm:ss")
                </span>
            </div>
            @if (!string.IsNullOrEmpty(lastUpdateMessage))
            {
                <div class="alert alert-info d-inline-block">
                    <i class="fas fa-info-circle me-2"></i>
                    @lastUpdateMessage
                </div>
            }
        </div>
    </div>

    @if (flights == null)
    {
        <div class="text-center">
            <div class="spinner-border text-light spinner-border-lg" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3 text-light fs-4">Loading flights...</p>
        </div>
    }
    else if (!flights.Any())
    {
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="alert alert-warning text-center">
                    <h4>
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        No flights available
                    </h4>
                    <p>Please check back later for flight information.</p>
                    <button class="btn btn-primary" @onclick="LoadFlightsAsync">
                        <i class="fas fa-sync-alt me-2"></i>
                        Refresh
                    </button>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            @foreach (var flight in flights)
            {
                <div class="col-xl-4 col-lg-6 col-md-12 mb-4">
                    <div class="card h-100 @GetFlightCardClass(flight.FlightNumber)">
                        <div class="card-header @GetStatusClass(flight.Status) text-white">
                            <div class="d-flex justify-content-between align-items-center">
                                <h5 class="card-title mb-0 fw-bold">
                                    @flight.FlightNumber
                                </h5>
                                @if (IsFlightUpdatedRecently(flight.FlightNumber))
                                {
                                    <span class="badge bg-success">
                                        <i class="fas fa-sync-alt fa-spin me-1"></i>
                                        Updated
                                    </span>
                                }
                            </div>
                            <small class="opacity-75">@flight.AircraftModel</small>
                        </div>
                        <div class="card-body">
                            <div class="row text-center mb-3">
                                <div class="col-5">
                                    <h6 class="text-muted mb-1">FROM</h6>
                                    <h2 class="text-primary mb-0 fw-bold">@flight.Origin</h2>
                                </div>
                                <div class="col-2 d-flex align-items-center justify-content-center">
                                    <i class="fas fa-plane text-primary fa-2x"></i>
                                </div>
                                <div class="col-5">
                                    <h6 class="text-muted mb-1">TO</h6>
                                    <h2 class="text-primary mb-0 fw-bold">@flight.Destination</h2>
                                </div>
                            </div>
                            <hr>
                            <div class="row mb-3">
                                <div class="col-6 text-center">
                                    <i class="fas fa-plane-departure text-success mb-2 fs-4"></i>
                                    <div>
                                        <small class="text-muted">Departure</small>
                                        <div class="fw-bold fs-5">@flight.DepartureTime.ToString("HH:mm")</div>
                                        <div class="text-muted small">@flight.DepartureTime.ToString("MMM dd, yyyy")</div>
                                    </div>
                                </div>
                                <div class="col-6 text-center">
                                    <i class="fas fa-plane-arrival text-info mb-2 fs-4"></i>
                                    <div>
                                        <small class="text-muted">Arrival</small>
                                        <div class="fw-bold fs-5">@flight.ArrivalTime.ToString("HH:mm")</div>
                                        <div class="text-muted small">@flight.ArrivalTime.ToString("MMM dd, yyyy")</div>
                                    </div>
                                </div>
                            </div>
                            @{
                                var timeUntil = GetTimeUntilDeparture(flight);
                            }
                            @if (timeUntil != null)
                            {
                                <div class="alert alert-light text-center mb-3">
                                    <small class="text-muted">Time until departure:</small>
                                    <div class="fw-bold">@timeUntil</div>
                                </div>
                            }
                        </div>
                        <div class="card-footer bg-transparent">
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="badge @GetStatusClass(flight.Status) status-badge">
                                    <i class="@GetStatusIcon(flight.Status) me-1"></i>
                                    @GetStatusText(flight.Status)
                                </span>
                                <div class="text-end">
                                    <small class="text-muted d-block">Available Seats</small>
                                    <span class="fw-bold fs-5 text-success">@flight.AvailableSeats</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        <div class="text-center mt-4">
            <button class="btn btn-light btn-lg" @onclick="LoadFlightsAsync">
                <i class="fas fa-sync-alt me-2"></i>
                Refresh Flights
            </button>
        </div>
    }
</div>

@code {
    private List<FlightDto>? flights;
    private HubConnection? hubConnection;
    private string connectionStatus = "Connecting...";
    private DateTime lastUpdated = DateTime.Now;
    private string lastUpdateMessage = "";
    private HashSet<string> recentlyUpdatedFlights = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadFlightsAsync();
        await SetupSignalRAsync();
    }

    private async Task LoadFlightsAsync()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<FlightDto>>("api/flights");
            flights = response ?? new List<FlightDto>();
            lastUpdated = DateTime.Now;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading flights: {ex.Message}");
            flights = new List<FlightDto>();
        }
    }

    private async Task SetupSignalRAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/flighthub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<JsonElement>("FlightStatusChanged", async (update) =>
        {
            try
            {
                var flightNumber = update.GetProperty("FlightNumber").GetString();
                var newStatus = update.GetProperty("NewStatus").GetString();

                lastUpdateMessage = $"Flight {flightNumber} status changed to {newStatus}";
                recentlyUpdatedFlights.Add(flightNumber ?? "");

                await LoadFlightsAsync();
                await InvokeAsync(StateHasChanged);

                // Clear update highlight after 5 seconds
                _ = Task.Delay(5000).ContinueWith(async _ =>
                {
                    recentlyUpdatedFlights.Remove(flightNumber ?? "");
                    await InvokeAsync(StateHasChanged);
                });
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error handling flight status change: {ex.Message}");
            }
        });

        hubConnection.Closed += async (error) =>
        {
            connectionStatus = "Disconnected";
            await InvokeAsync(StateHasChanged);
        };

        hubConnection.Reconnecting += async (error) =>
        {
            connectionStatus = "Reconnecting...";
            await InvokeAsync(StateHasChanged);
        };

        hubConnection.Reconnected += async (connectionId) =>
        {
            connectionStatus = "Connected";
            await InvokeAsync(StateHasChanged);
        };

        try
        {
            await hubConnection.StartAsync();
            connectionStatus = "Connected";
        }
        catch (Exception ex)
        {
            connectionStatus = $"Connection failed: {ex.Message}";
            Console.WriteLine($"SignalR connection failed: {ex.Message}");
        }

        StateHasChanged();
    }

    // Helper methods
    private string GetStatusClass(string status) => status switch
    {
        "CheckingIn" => "bg-primary",
        "Boarding" => "bg-warning text-dark",
        "Departed" => "bg-success",
        "Delayed" => "bg-danger",
        "Cancelled" => "bg-dark",
        _ => "bg-secondary"
    };

    private string GetStatusText(string status) => status switch
    {
        "CheckingIn" => "Check-in Open",
        "Boarding" => "Now Boarding",
        "Departed" => "Departed",
        "Delayed" => "Delayed",
        "Cancelled" => "Cancelled",
        _ => "Unknown"
    };

    private string GetStatusIcon(string status) => status switch
    {
        "CheckingIn" => "fas fa-check-circle",
        "Boarding" => "fas fa-door-open",
        "Departed" => "fas fa-plane-departure",
        "Delayed" => "fas fa-clock",
        "Cancelled" => "fas fa-times-circle",
        _ => "fas fa-question-circle"
    };

    private string GetConnectionStatusClass() => connectionStatus switch
    {
        "Connected" => "bg-success",
        "Connecting..." or "Reconnecting..." => "bg-warning text-dark",
        _ => "bg-danger"
    };

    private bool IsFlightUpdatedRecently(string flightNumber) =>
        recentlyUpdatedFlights.Contains(flightNumber);

    private string GetFlightCardClass(string flightNumber) =>
        IsFlightUpdatedRecently(flightNumber) ? "flight-card-pulse" : "";

    private string? GetTimeUntilDeparture(FlightDto flight)
    {
        var timeUntil = flight.DepartureTime - DateTime.Now;
        if (timeUntil.TotalMinutes < 0)
            return null;

        if (timeUntil.TotalHours < 24)
        {
            if (timeUntil.TotalHours >= 1)
                return $"{timeUntil.Hours}h {timeUntil.Minutes}m";
            else
                return $"{timeUntil.Minutes} minutes";
        }
        return $"{timeUntil.Days} days";
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
