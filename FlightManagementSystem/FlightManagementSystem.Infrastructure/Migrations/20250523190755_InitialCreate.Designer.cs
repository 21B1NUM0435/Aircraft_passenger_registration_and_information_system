// <auto-generated />
using System;
using FlightManagementSystem.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlightManagementSystem.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250523190755_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.13");

            modelBuilder.Entity("FlightManagementSystem.Core.Models.Aircraft", b =>
                {
                    b.Property<string>("AircraftId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ManufacturedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AircraftId");

                    b.ToTable("Aircraft");
                });

            modelBuilder.Entity("FlightManagementSystem.Core.Models.AirlineStaff", b =>
                {
                    b.Property<string>("StaffId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("StaffId");

                    b.ToTable("AirlineStaff");
                });

            modelBuilder.Entity("FlightManagementSystem.Core.Models.BoardingPass", b =>
                {
                    b.Property<string>("BoardingPassId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BoardingTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("BookingReference")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Gate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("BoardingPassId");

                    b.HasIndex("BookingReference");

                    b.ToTable("BoardingPasses");
                });

            modelBuilder.Entity("FlightManagementSystem.Core.Models.Booking", b =>
                {
                    b.Property<string>("BookingReference")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("CheckInStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FlightNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PassengerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("TEXT");

                    b.HasKey("BookingReference");

                    b.HasIndex("FlightNumber");

                    b.HasIndex("PassengerId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("FlightManagementSystem.Core.Models.CheckInCounter", b =>
                {
                    b.Property<string>("CounterId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Terminal")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CounterId");

                    b.HasIndex("StaffId");

                    b.ToTable("CheckInCounters");
                });

            modelBuilder.Entity("FlightManagementSystem.Core.Models.CheckInRecord", b =>
                {
                    b.Property<string>("CheckInId")
                        .HasColumnType("TEXT");

                    b.Property<string>("BookingReference")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CheckInMethod")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CheckInTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("CounterId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CheckInId");

                    b.HasIndex("BookingReference");

                    b.HasIndex("CounterId");

                    b.HasIndex("StaffId");

                    b.ToTable("CheckInRecords");
                });

            modelBuilder.Entity("FlightManagementSystem.Core.Models.Flight", b =>
                {
                    b.Property<string>("FlightNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("AircraftId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("FlightNumber");

                    b.HasIndex("AircraftId");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("FlightManagementSystem.Core.Models.Passenger", b =>
                {
                    b.Property<string>("PassengerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PassportExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PassengerId");

                    b.ToTable("Passengers");
                });

            modelBuilder.Entity("FlightManagementSystem.Core.Models.Seat", b =>
                {
                    b.Property<string>("SeatId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AircraftId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("SeatClass")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SeatId");

                    b.HasIndex("AircraftId");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("FlightManagementSystem.Core.Models.SeatAssignment", b =>
                {
                    b.Property<string>("AssignmentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("BookingReference")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SeatId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AssignmentId");

                    b.HasIndex("BookingReference");

                    b.HasIndex("SeatId");

                    b.ToTable("SeatAssignments");
                });

            modelBuilder.Entity("FlightManagementSystem.Core.Models.BoardingPass", b =>
                {
                    b.HasOne("FlightManagementSystem.Core.Models.Booking", "Booking")
                        .WithMany("BoardingPasses")
                        .HasForeignKey("BookingReference")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("FlightManagementSystem.Core.Models.Booking", b =>
                {
                    b.HasOne("FlightManagementSystem.Core.Models.Flight", "Flight")
                        .WithMany("Bookings")
                        .HasForeignKey("FlightNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightManagementSystem.Core.Models.Passenger", "Passenger")
                        .WithMany("Bookings")
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");

                    b.Navigation("Passenger");
                });

            modelBuilder.Entity("FlightManagementSystem.Core.Models.CheckInCounter", b =>
                {
                    b.HasOne("FlightManagementSystem.Core.Models.AirlineStaff", "Staff")
                        .WithMany("CheckInCounters")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("FlightManagementSystem.Core.Models.CheckInRecord", b =>
                {
                    b.HasOne("FlightManagementSystem.Core.Models.Booking", "Booking")
                        .WithMany("CheckInRecords")
                        .HasForeignKey("BookingReference")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightManagementSystem.Core.Models.CheckInCounter", "Counter")
                        .WithMany("CheckInRecords")
                        .HasForeignKey("CounterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightManagementSystem.Core.Models.AirlineStaff", "Staff")
                        .WithMany("CheckInRecords")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Counter");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("FlightManagementSystem.Core.Models.Flight", b =>
                {
                    b.HasOne("FlightManagementSystem.Core.Models.Aircraft", "Aircraft")
                        .WithMany("Flights")
                        .HasForeignKey("AircraftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aircraft");
                });

            modelBuilder.Entity("FlightManagementSystem.Core.Models.Seat", b =>
                {
                    b.HasOne("FlightManagementSystem.Core.Models.Aircraft", "Aircraft")
                        .WithMany("Seats")
                        .HasForeignKey("AircraftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aircraft");
                });

            modelBuilder.Entity("FlightManagementSystem.Core.Models.SeatAssignment", b =>
                {
                    b.HasOne("FlightManagementSystem.Core.Models.Booking", "Booking")
                        .WithMany("SeatAssignments")
                        .HasForeignKey("BookingReference")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightManagementSystem.Core.Models.Seat", "Seat")
                        .WithMany("SeatAssignments")
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("FlightManagementSystem.Core.Models.Aircraft", b =>
                {
                    b.Navigation("Flights");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("FlightManagementSystem.Core.Models.AirlineStaff", b =>
                {
                    b.Navigation("CheckInCounters");

                    b.Navigation("CheckInRecords");
                });

            modelBuilder.Entity("FlightManagementSystem.Core.Models.Booking", b =>
                {
                    b.Navigation("BoardingPasses");

                    b.Navigation("CheckInRecords");

                    b.Navigation("SeatAssignments");
                });

            modelBuilder.Entity("FlightManagementSystem.Core.Models.CheckInCounter", b =>
                {
                    b.Navigation("CheckInRecords");
                });

            modelBuilder.Entity("FlightManagementSystem.Core.Models.Flight", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("FlightManagementSystem.Core.Models.Passenger", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("FlightManagementSystem.Core.Models.Seat", b =>
                {
                    b.Navigation("SeatAssignments");
                });
#pragma warning restore 612, 618
        }
    }
}
