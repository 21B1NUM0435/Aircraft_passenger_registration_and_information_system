@page "/check-in"
@using FlightManagementSystem.Core.Models
@using FlightManagementSystem.Web.Models.Api
@using Microsoft.AspNetCore.SignalR.Client
@using System.Net.Http.Json
@using System.Text.Json
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>Passenger Check-In</PageTitle>

@if(isLoading)
{
    <div class="spinner-overlay">
        <div class="spinner-container">
            <div class="spinner-border text-primary" role="status">         
                <span class="visually-hidden">
                Loading...
                </span>
            </div>   
            <div class="spinner-text">
            Processing...
            </div>
        </div>
    </div>
}


<div class="container">
    <h1 class="mb-4">Passenger Check-In</h1>

    <div class="row mb-4">
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h4>Staff Information</h4>
                </div>
                <div class="card-body">
                    <p><strong>Staff ID:</strong> @staffId</p>
                    <p><strong>Name:</strong> @staffName</p>
                    <p><strong>Counter:</strong> @counterId</p>
                </div>
            </div>
        </div>

        <div class="col-md-8">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4>Flight Selection</h4>
                    <button class="btn btn-primary" @onclick="LoadFlightsAsync">
                        <i class="oi oi-reload"></i> Refresh
                    </button>
                </div>
                <div class="card-body">
                    <div class="form-group mb-3">
                        <label for="flightSelect">Select Flight:</label>
                        <select id="flightSelect" class="form-control" @bind="selectedFlightNumber" @bind:after="UpdateFlightInfoAsync">
                            <option value="">-- Select a flight --</option>
                            @foreach (var flight in flights)
                            {
                                <option value="@flight.FlightNumber">@flight.FlightNumber - @flight.Origin to @flight.Destination (@flight.DepartureTime.ToString("HH:mm"))</option>
                            }
                        </select>
                    </div>

                    
                    @if (!string.IsNullOrEmpty(selectedFlightNumber))
                    {
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <span class="badge bg-info text-dark p-2">
                            Status: @currentFlightStatus
                            </span>
                            <div class="d-flex align-items-center">
                                <select class="form-control me-2" @bind="newFlightStatus">                            
                                    <option value="CheckingIn">
                                    Checking In
                                    </option>                           
                                    <option value="Boarding">
                                    Boarding
                                    </option>                              
                                    <option value="Departed">
                                    Departed
                                    </option>                               
                                    <option value="Delayed">
                                    Delayed
                                    </option>                  
                                    <option value="Cancelled">
                                    Cancelled
                                    </option>                     
                                </select>                       
                                <button class="btn btn-warning" @onclick="UpdateFlightStatusAsync" disabled="@(!isFlightStatusUpdatable)">
                                Update Status
                                </button>                   
                            </div>                  
                        </div>               
                    }

                </div>
            </div>
        </div>
    </div>


    @if (!string.IsNullOrEmpty(selectedFlightNumber))
    {
        <div class="row">
            <div class="col-md-5">
                <div class="card">
                    <div class="card-header">
                        <h4>Passenger Search</h4>
                    </div>
                    <div class="card-body">
                        <div class="form-group">
                            <label for="passportNumber">Passport Number:</label>
                            <div class="input-group mb-3">
                                <input type="text" id="passportNumber" class="form-control"
                                       @bind="passportNumber"
                                       placeholder="Enter passport number"
                                       disabled="@(!isCheckInAvailable)" />
                                <button class="btn btn-primary"
                                        @onclick="SearchPassengerAsync"
                                        disabled="@(!isCheckInAvailable)">
                                    <i class="oi oi-magnifying-glass"></i> Search
                                </button>
                            </div>
                        </div>

                        @if (currentBooking != null)
                        {
                            <div class="alert alert-info">
                                <h5>Passenger Details</h5>
                                <p><strong>Name:</strong> @currentBooking.PassengerName</p>
                                <p><strong>Booking Reference:</strong> @currentBooking.BookingReference</p>
                                <p><strong>Status:</strong> @(currentBooking.CheckedIn ? "Checked In" : "Not Checked In")</p>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">@errorMessage</div>
                        }
                    </div>
                </div>
            </div>

            <div class="col-md-7">
                <div class="card">
                    <div class="card-header">
                        <h4>Seat Assignment</h4>
                    </div>
                    <div class="card-body">
                        @if (isLoading)
                        {
                            <div class="d-flex justify-content-center">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                        }
                        else if (availableSeats.Count == 0)
                        {
                            <div class="alert alert-warning">
                                <i class="oi oi-warning"></i> No available seats for this flight.
                            </div>
                        }
                        else
                        {
                            <div class="mb-3">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <h5 class="mb-0">Seat Map</h5>
                                    <div>
                                        <span class="badge bg-primary">Business Class</span>
                                        <span class="badge bg-secondary">Economy Class</span>
                                    </div>
                                </div>
                                <div class="seat-map">
                                    <!-- Plane nose shape -->
                                    <div class="d-flex justify-content-center mb-3">
                                        <div style="width: 120px; height: 40px; background-color: #f8f9fa; border-top-left-radius: 50%; border-top-right-radius: 50%; border: 1px solid #ddd; display: flex; justify-content: center; align-items: center; font-weight: bold;">
                                            FRONT
                                        </div>
                                    </div>

                                    <!-- Business Class (First few rows) -->
                                    @for (int row = 1; row <= 3; row++)
                                    {
                                        <div class="seat-row">
                                            <div class="seat-row-label" style="width: 30px; text-align: center; font-weight: bold;">@row</div>
                                            @foreach (var col in new[] { "A", "B" })
                                            {
                                                string seatNumber = $"{row}{col}";
                                                var seat = availableSeats.FirstOrDefault(s => s.SeatNumber == seatNumber);
                                                string seatClass = seat?.SeatClass?.ToLower() ?? "";
                                                bool isAvailable = seat != null;
                                                bool isSelected = isAvailable && seat.SeatId == selectedSeatId;

                                                <div class="@GetSeatClasses(isAvailable, isSelected, seatClass)"
                                                     @onclick="() => SelectSeat(seat?.SeatId ?? string.Empty)">
                                                    @seatNumber
                                                </div>
                                            }
                                            <div style="width: 40px;"></div> <!-- Aisle -->
                                            @foreach (var col in new[] { "C", "D" })
                                            {
                                                string seatNumber = $"{row}{col}";
                                                var seat = availableSeats.FirstOrDefault(s => s.SeatNumber == seatNumber);
                                                string seatClass = seat?.SeatClass?.ToLower() ?? "";
                                                bool isAvailable = seat != null;
                                                bool isSelected = isAvailable && seat.SeatId == selectedSeatId;

                                                <div class="@GetSeatClasses(isAvailable, isSelected, seatClass)"
                                                     @onclick="() => SelectSeat(seat?.SeatId ?? string.Empty)">
                                                    @seatNumber
                                                </div>
                                            }
                                        </div>
                                    }

                                    <!-- Divider between classes -->
                                    <div class="my-3 border-bottom border-2"></div>

                                    <!-- Economy Class (Remaining rows) -->
                                    @for (int row = 10; row <= 25; row++)
                                    {
                                        <div class="seat-row">
                                            <div class="seat-row-label" style="width: 30px; text-align: center; font-weight: bold;">@row</div>
                                            @foreach (var col in new[] { "A", "B", "C" })
                                            {
                                                string seatNumber = $"{row}{col}";
                                                var seat = availableSeats.FirstOrDefault(s => s.SeatNumber == seatNumber);
                                                string seatClass = seat?.SeatClass?.ToLower() ?? "";
                                                bool isAvailable = seat != null;
                                                bool isSelected = isAvailable && seat.SeatId == selectedSeatId;

                                                <div class="@GetSeatClasses(isAvailable, isSelected, seatClass)"
                                                     @onclick="() => SelectSeat(seat?.SeatId ?? string.Empty)">
                                                    @seatNumber
                                                </div>
                                            }
                                            <div style="width: 40px;"></div> <!-- Aisle -->
                                            @foreach (var col in new[] { "D", "E", "F" })
                                            {
                                                string seatNumber = $"{row}{col}";
                                                var seat = availableSeats.FirstOrDefault(s => s.SeatNumber == seatNumber);
                                                string seatClass = seat?.SeatClass?.ToLower() ?? "";
                                                bool isAvailable = seat != null;
                                                bool isSelected = isAvailable && seat.SeatId == selectedSeatId;

                                                <div class="@GetSeatClasses(isAvailable, isSelected, seatClass)"
                                                     @onclick="() => SelectSeat(seat?.SeatId ?? string.Empty)">
                                                    @seatNumber
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>

                                <!-- Seat legend -->
                                <div class="seat-legend mt-3">
                                    <div class="seat-legend-item">
                                        <div class="seat-legend-color" style="background-color: #e9ecef;"></div>
                                        <span>Unavailable</span>
                                    </div>
                                    <div class="seat-legend-item">
                                        <div class="seat-legend-color" style="background-color: #f8f9fa;"></div>
                                        <span>Available</span>
                                    </div>
                                    <div class="seat-legend-item">
                                        <div class="seat-legend-color" style="background-color: #3498db;"></div>
                                        <span>Selected</span>
                                    </div>
                                    <div class="seat-legend-item">
                                        <div class="seat-legend-color" style="background-color: #f1c40f;"></div>
                                        <span>Business Class</span>
                                    </div>
                                </div>

                                <!-- Selected seat information -->
                                @if (!string.IsNullOrEmpty(selectedSeatId))
                                {
                                    var selectedSeat = availableSeats.FirstOrDefault(s => s.SeatId == selectedSeatId);
                                    if (selectedSeat != null)
                                    {
                                        <div class="alert alert-info mb-3">
                                            <h5>Selected Seat</h5>
                                            <p><strong>Seat Number:</strong> @selectedSeat.SeatNumber</p>
                                            <p><strong>Class:</strong> @selectedSeat.SeatClass</p>
                                            <p><strong>Price:</strong> @selectedSeat.Price.ToString("C")</p>
                                        </div>
                                    }
                                }

                                <div class="d-grid">
                                    <button class="btn btn-success btn-lg"
                                            @onclick="ProcessCheckInAsync"
                                            disabled="@(!CanCheckIn())">
                                        <i class="oi oi-check"></i> Check In Passenger
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    // Staff information
    private string staffId = "ST001";
    private string staffName = "John Smith";
    private string counterId = "C001";

    // Flight and passenger data
    private List<FlightDto> flights = new List<FlightDto>();
    private List<SeatDto> availableSeats = new List<SeatDto>();
    private string selectedFlightNumber = "";
    private string currentFlightStatus = "";
    private string newFlightStatus = "CheckingIn";
    private string passportNumber = "";
    private string selectedSeatId = "";
    private BookingDto? currentBooking;
    private string errorMessage = "";
    private bool isLoading = false;
    private bool isCheckInAvailable = false;
    private bool isFlightStatusUpdatable = false;

    // SignalR connection
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        await LoadFlightsAsync();
        await ConfigureSignalRAsync();
    }

    private async Task ConfigureSignalRAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/flighthub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<FlightStatusUpdate>("FlightStatusChanged", async (message) =>
        {
            if (message.FlightNumber == selectedFlightNumber)
            {
                currentFlightStatus = message.NewStatus;
                await UpdateCheckInAvailabilityAsync();
                await InvokeAsync(StateHasChanged);
            }
        });

        hubConnection.On<SeatAssignmentUpdate>("SeatAssigned", async (message) =>
        {
            if (message.FlightNumber == selectedFlightNumber && message.IsAssigned)
            {
                // Remove the assigned seat from our available seats list
                var seatToRemove = availableSeats.FirstOrDefault(s => s.SeatId == message.SeatId);
                if (seatToRemove != null)
                {
                    availableSeats.Remove(seatToRemove);
                    if (selectedSeatId == message.SeatId)
                    {
                        selectedSeatId = "";
                    }
                    await InvokeAsync(StateHasChanged);
                }
            }
        });

        try
        {
            await hubConnection.StartAsync();
            Console.WriteLine("SignalR Connected");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SignalR Connection Error: {ex.Message}");
        }
    }

    private async Task LoadFlightsAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = "";

            var response = await new HttpClient().GetAsync($"{NavigationManager.BaseUri}api/flights");
            if (response.IsSuccessStatusCode)
            {
                flights = await response.Content.ReadFromJsonAsync<List<FlightDto>>() ?? new List<FlightDto>();

                // If we previously had a selected flight, try to maintain that selection
                if (!string.IsNullOrEmpty(selectedFlightNumber))
                {
                    var flight = flights.FirstOrDefault(f => f.FlightNumber == selectedFlightNumber);
                    if (flight != null)
                    {
                        currentFlightStatus = flight.Status;
                        await UpdateCheckInAvailabilityAsync();
                    }
                    else
                    {
                        // Our flight is no longer available, reset the selection
                        selectedFlightNumber = "";
                        currentFlightStatus = "";
                        isCheckInAvailable = false;
                    }
                }
            }
            else
            {
                errorMessage = "Error loading flights. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task UpdateFlightInfoAsync()
    {
        if (string.IsNullOrEmpty(selectedFlightNumber))
        {
            availableSeats.Clear();
            currentFlightStatus = "";
            isCheckInAvailable = false;
            isFlightStatusUpdatable = false;
            return;
        }

        // Get the flight details
        var flight = flights.FirstOrDefault(f => f.FlightNumber == selectedFlightNumber);
        if (flight != null)
        {
            currentFlightStatus = flight.Status;
            newFlightStatus = currentFlightStatus;
            await UpdateCheckInAvailabilityAsync();
            isFlightStatusUpdatable = true;
        }

        await LoadAvailableSeatsAsync();

        // Subscribe to updates for this flight via SignalR
        if (hubConnection?.State == HubConnectionState.Connected)
        {
            await hubConnection.SendAsync("SubscribeToFlightUpdates", selectedFlightNumber);
        }
    }

    private async Task UpdateCheckInAvailabilityAsync()
    {
        // Only allow check-in if the flight status is "CheckingIn"
        isCheckInAvailable = currentFlightStatus == "CheckingIn";

        // Clear passenger info if we can't check in anymore
        if (!isCheckInAvailable)
        {
            currentBooking = null;
            selectedSeatId = "";
        }
    }

    private async Task LoadAvailableSeatsAsync()
    {
        if (string.IsNullOrEmpty(selectedFlightNumber))
        {
            availableSeats.Clear();
            return;
        }

        try
        {
            isLoading = true;
            errorMessage = "";

            var response = await new HttpClient().GetAsync($"{NavigationManager.BaseUri}api/checkin/available-seats/{selectedFlightNumber}");
            if (response.IsSuccessStatusCode)
            {
                availableSeats = await response.Content.ReadFromJsonAsync<List<SeatDto>>() ?? new List<SeatDto>();
            }
            else
            {
                errorMessage = "Error loading available seats. Please try again.";
                availableSeats.Clear();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            availableSeats.Clear();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SearchPassengerAsync()
    {
        if (string.IsNullOrWhiteSpace(passportNumber))
        {
            errorMessage = "Please enter a passport number.";
            return;
        }

        try
        {
            isLoading = true;
            errorMessage = "";
            currentBooking = null;

            var response = await new HttpClient().GetAsync($"{NavigationManager.BaseUri}api/checkin/search?passportNumber={passportNumber}&flightNumber={selectedFlightNumber}");
            
            if (response.IsSuccessStatusCode)
            {
                currentBooking = await response.Content.ReadFromJsonAsync<BookingDto>();
                
                if (currentBooking != null && currentBooking.CheckedIn)
                {
                    errorMessage = "This passenger is already checked in.";
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                errorMessage = "No booking found for this passport number on this flight.";
            }
            else
            {
                errorMessage = "Error searching for passenger. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private bool CanCheckIn()
    {
        return 
            isCheckInAvailable && 
            currentBooking != null && 
            !currentBooking.CheckedIn && 
            !string.IsNullOrEmpty(selectedSeatId);
    }

    private async Task ProcessCheckInAsync()
    {
        if (!CanCheckIn())
        {
            return;
        }

        try
        {
            isLoading = true;
            errorMessage = "";

            var checkInRequest = new CheckInRequestDto
            {
                BookingReference = currentBooking!.BookingReference,
                FlightNumber = selectedFlightNumber,
                SeatId = selectedSeatId,
                StaffId = staffId,
                CounterId = counterId,
                PassengerName = currentBooking.PassengerName
            };

            var content = JsonContent.Create(checkInRequest);
            var response = await new HttpClient().PostAsync($"{NavigationManager.BaseUri}api/checkin/process", content);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<CheckInResponseDto>();

                if (result != null && result.Success)
                {
                    // Show success message
                    await JSRuntime.InvokeVoidAsync("alert", "Check-in successful! Boarding pass has been generated.");

                    // Clear the form for the next check-in
                    passportNumber = "";
                    currentBooking = null;
                    selectedSeatId = "";

                    // Refresh the available seats
                    await LoadAvailableSeatsAsync();
                }
                else
                {
                    errorMessage = result?.Message ?? "Check-in failed. Please try again.";
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Conflict)
            {
                errorMessage = "The selected seat is no longer available. Please select another seat.";
                await LoadAvailableSeatsAsync();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                try
                {
                    var errorResponse = JsonSerializer.Deserialize<ErrorResponse>(errorContent);
                    errorMessage = errorResponse?.Error ?? "Check-in failed. Please try again.";
                }
                catch
                {
                    errorMessage = "Check-in failed. Please try again.";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task UpdateFlightStatusAsync()
    {
        if (string.IsNullOrEmpty(selectedFlightNumber) || newFlightStatus == currentFlightStatus)
        {
            return;
        }

        try
        {
            isLoading = true;
            errorMessage = "";

            var updateRequest = new UpdateFlightStatusDto
            {
                NewStatus = newFlightStatus
            };

            var content = JsonContent.Create(updateRequest);
            var response = await new HttpClient().PatchAsync($"{NavigationManager.BaseUri}api/flights/{selectedFlightNumber}/status", content);

            if (response.IsSuccessStatusCode)
            {
                currentFlightStatus = newFlightStatus;
                await UpdateCheckInAvailabilityAsync();
                await JSRuntime.InvokeVoidAsync("alert", "Flight status updated successfully!");
            }
            else
            {
                errorMessage = "Failed to update flight status. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetSeatClasses(bool isAvailable, bool isSelected, string seatClass)
    {
        var classes = "seat";
        
        if (!isAvailable)
        {
            classes += " seat-unavailable";
        }
        else if (isSelected)
        {
            classes += " seat-selected";
        }
        else
        {
            classes += " seat-available";
        }
        
        if (seatClass.Contains("business"))
        {
            classes += " seat-business";
        }
        else if (seatClass.Contains("first"))
        {
            classes += " seat-first";
        }
        
        return classes;
    }
    
    private void SelectSeat(string seatId)
    {
        if (string.IsNullOrEmpty(seatId) || !isCheckInAvailable || currentBooking == null || currentBooking.CheckedIn)
        {
            // Don't allow selection for unavailable seats or if passenger is already checked in
            return;
        }
        
        selectedSeatId = seatId;
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
    
    // Helper classes for SignalR messages
    private class FlightStatusUpdate
    {
        public string FlightNumber { get; set; } = string.Empty;
        public string NewStatus { get; set; } = string.Empty;
        public DateTime Timestamp { get; set; }
    }

    private class SeatAssignmentUpdate
    {
        public string FlightNumber { get; set; } = string.Empty;
        public string SeatId { get; set; } = string.Empty;
        public bool IsAssigned { get; set; }
        public DateTime Timestamp { get; set; }
    }

    private class ErrorResponse
    {
        public string Error { get; set; } = string.Empty;
    }
}