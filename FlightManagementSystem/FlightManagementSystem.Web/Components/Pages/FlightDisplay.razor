@page "/flight-display"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable
@using Microsoft.JSInterop
@using FlightManagementSystem.Web.Models.Api
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@using System.Text.Json.Serialization

<PageTitle>Flight Information Display</PageTitle>

<div class="flight-display-container">
    <div class="display-header">
        <h1>✈️ FLIGHT INFORMATION</h1>
        <div class="current-time">@DateTime.Now.ToString("HH:mm:ss - dd MMMM yyyy")</div>
    </div>

    <div class="flights-board">
        @if (flights.Count == 0)
        {
            <div class="loading-message">
                <div class="loading-spinner"></div>
                <p>Loading flight information...</p>
            </div>
        }
        else
        {
            <div class="flight-header">
                <div class="header-cell">FLIGHT</div>
                <div class="header-cell">ROUTE</div>
                <div class="header-cell">DEPARTURE</div>
                <div class="header-cell">ARRIVAL</div>
                <div class="header-cell">AIRCRAFT</div>
                <div class="header-cell">STATUS</div>
            </div>
            @foreach (var flight in flights)
            {
                <div class="flight-row @GetStatusClass(flight.Status)">
                    <div class="flight-cell flight-number">@flight.FlightNumber</div>
                    <div class="flight-cell route">
                        <span class="origin">@flight.Origin</span>
                        <span class="arrow">→</span>
                        <span class="destination">@flight.Destination</span>
                    </div>
                    <div class="flight-cell time">@flight.DepartureTime.ToString("HH:mm")</div>
                    <div class="flight-cell time">@flight.ArrivalTime.ToString("HH:mm")</div>
                    <div class="flight-cell aircraft">@flight.AircraftModel</div>
                    <div class="flight-cell status">
                        <span class="status-badge @GetStatusClass(flight.Status)">
                            @GetStatusDisplay(flight.Status)
                        </span>
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    private HubConnection? hubConnection;
    private List<FlightDto> flights = new List<FlightDto>();
    private System.Threading.Timer? refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadFlightsAsync();

        // Set up SignalR connection for real-time updates
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/flighthub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<FlightStatusChangedMessage>("FlightStatusChanged", (message) =>
        {
            var flight = flights.FirstOrDefault(f => f.FlightNumber == message.FlightNumber);
            if (flight != null)
            {
                flight.Status = message.NewStatus;
                InvokeAsync(StateHasChanged);
            }
        });

        await hubConnection.StartAsync();

        // Refresh time every second and flight data every 30 seconds
        refreshTimer = new System.Threading.Timer(async _ =>
        {
            await InvokeAsync(StateHasChanged);

            // Refresh flight data every 30 seconds
            if (DateTime.Now.Second % 30 == 0)
            {
                await LoadFlightsAsync();
            }
        }, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }

    private async Task LoadFlightsAsync()
    {
        try
        {
            var response = await new HttpClient().GetAsync($"{NavigationManager.BaseUri}api/flights");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                flights = JsonSerializer.Deserialize<List<FlightDto>>(content, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    }) ?? new List<FlightDto>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading flights: {ex.Message}");
        }
    }

    private string GetStatusClass(string status)
    {
        return status.ToLower() switch
        {
            "checkingin" => "status-checkingin",
            "boarding" => "status-boarding",
            "departed" => "status-departed",
            "delayed" => "status-delayed",
            "cancelled" => "status-cancelled",
            _ => "status-unknown"
        };
    }

    private string GetStatusDisplay(string status)
    {
        return status.ToLower() switch
        {
            "checkingin" => "CHECK-IN OPEN",
            "boarding" => "BOARDING",
            "departed" => "DEPARTED",
            "delayed" => "DELAYED",
            "cancelled" => "CANCELLED",
            _ => status.ToUpper()
        };
    }

    public async ValueTask DisposeAsync()
    {
        if (refreshTimer != null)
        {
            await refreshTimer.DisposeAsync();
        }

        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private class FlightStatusChangedMessage
    {
        [JsonPropertyName("flightNumber")]
        public string FlightNumber { get; set; } = string.Empty;

        [JsonPropertyName("newStatus")]
        public string NewStatus { get; set; } = string.Empty;

        [JsonPropertyName("timestamp")]
        public DateTime Timestamp { get; set; }
    }
}
